{"pages":[{"title":"Categories","date":"2021-05-09T03:32:42.338Z","path":"categories/index.html","text":""},{"title":"","date":"2021-05-09T06:02:59.541Z","path":"/404.html","text":"Error 404 Not Found - 页面君不见了哟~ 404 退散！ 您所访问的地址无法找到或者已经被删除了， 如果您是从搜索结果点击进来看到的 404，可以先尝试使用页面 右上方的搜索文章。 访问本站出现 404，一般是因为以下原因： 本站启用固定链接之后，搜索引擎未全面更新收录。所以有时候搜索结果里的文章链接是错误的。 来都来了，就先逛逛嘛~~ 您可以访问 本站主页 ，或者联系我，吐槽下问题的详细情况， 也可以通过页面上方的 分类 或 标签 来查看本站已有的一些 tags。"},{"title":"about","date":"2021-05-08T16:06:17.000Z","path":"about/index.html","text":"关于我："},{"title":"Tags","date":"2021-05-09T03:31:45.224Z","path":"tags/index.html","text":""}],"posts":[{"title":"MyBatis","date":"2021-05-09T06:51:06.000Z","path":"wiki/框架/MyBatis/MyBatis/","text":"Mybatis架构图123456789101112131415graph TD A(Mybatis配置文件)--&gt;B(主配置文件sqlMapConfig.xml) A--&gt;Q(Mapper1.xml) Q--&gt;C B--&gt;C(SqlSessionFactorysession工厂) C --&gt;D( SqlSession 对外提供的接口) D--&gt;F(Excutor 执行者) F--&gt;L(MappedStatement) L--&gt;H((数据库))``` ### 搭建Mybatis项目 1. 下载Mybatis压缩包https://github.com/mybatis/mybatis-3/release，将解压后的mybatis-3.4.6.jar包和lib目录下的jar包全部导入2. 参考资料：官方基础教程http://www.mybatis.org/mybatis-3/zh/getting-started.html3. 创建测试用例，测试数据库，测试bean对象4. 创建sqlMapConfig.xml主配置文件 12345678910115. 创建Mapper.xml文件``` &lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;&lt;!DOCTYPE mapper PUBLIC &quot;-//mybatis.org//DTD Mapper 3.0//EN&quot; &quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;&gt; &lt;mapper namespace=&quot;SyMapper&quot;&gt; &lt;select id=&quot;selectSyById&quot; parameterType=&quot;String&quot; resultType=&quot;com.mybatis.bean.sy&quot;&gt; select * from sy where id = #&#123;id&#125; &lt;/select&gt; &lt;/mapper&gt; 6. 导入约束 7. 使用mybatis对数据表进行增删改查 8. 通过ID查询 123456789101112131415161718192021222324252627282930313233343536373839404142@Test //通过ID查询用户 public void test() throws IOException&#123; String resource = &quot;sqlMapConfig.xml&quot;; //读取配置文件 InputStream in = Resources.getResourceAsStream(resource); //获取sqlSessionFactoryBulider SqlSessionFactoryBuilder ssfb = new SqlSessionFactoryBuilder(); //创建sqlSessionFactory SqlSessionFactory sessionFactory = ssfb.build(in); //生产sqlSession SqlSession session = sessionFactory.openSession(); //操作数据库 //参数1：要操作的sql语句 参数2:sql语句的参数 sy sy =session.selectOne(&quot;SyMapper.selectSyById&quot;, &quot;1&quot;); System.out.println(sy.getSy()); &#125;``` 9. 模糊查询 1. Mapper.xml中配置sql语句 2. 操作数据库``` &lt;!-- 字段拼接必须使用$&#123;value&#125;字段 --&gt; &lt;select id=&quot;selectTestByName&quot; parameterType=&quot;String&quot; resultType=&quot;com.mybatis.bean.test&quot;&gt; &lt;!-- 字段拼接必须使用$&#123;value&#125;字段 --&gt; &lt;select id=&quot;selectTestByName&quot; parameterType=&quot;String&quot; resultType=&quot;com.mybatis.bean.test&quot;&gt; &lt;!-- 下面这种方式 字符串拼接方式，容易被SQL注入 --&gt; &lt;!-- select * from test where name LIKE &#x27;%$&#123;value&#125;%&#x27; --&gt; &lt;!-- 推荐下面这种方法 占位符方法#&#123;&#125; --&gt; select * from test where name LIKE &quot;%&quot;#&#123;name&#125;&quot;%&quot; &lt;/select&gt;``` ``` //模糊查询 List&lt;test&gt; list = session.selectList(&quot;SyMapper.selectTestByName&quot;,&quot;王&quot;); for(test t:list) &#123; System.out.println(t.getName()); &#125; 10. 更新数据 1234567891011//操作数据库 //更新数据 test t = new test(); t.setId(&quot;4&quot;); t.setName(&quot;李艾&quot;); t.setMoney(20.4f); session.update(&quot;SyMapper.updateTest&quot;, t); //提交事务 session.commit(); 1234&lt;!-- 更新数据 --&gt; &lt;update id=&quot;updateTest&quot; parameterType=&quot;com.mybatis.bean.test&quot;&gt; update test set name = #&#123;name&#125; where id = #&#123;id&#125; &lt;/update&gt; 11. 删除数据、插入数据类似，不再赘述 ### Mapper动态代理 - 创建动态代理接口 1234567891011121314151617181920212223242526272829303132333435363738//动态代理接口public interface TsetMapper &#123; /* * Mapper动态代理开发四大原则 * 1. mapper.xml文件的namespace字段为接口的全包名com.mybatis.mapper.TsetMapper 2. 接口名和配置文件名mapper相同，接口方法名必须与mapper.xml的要调用的sql语句的id一致 3. 接口的方法形参类型需要与mapper.xml中的parameterType一致 4. 接口的方法返回值类型需要与mapper.xml 中的resultType一致 5. 注意mapper动态代理开发中，使用的是session使用的是selectOne还是selectList会根据返回类型自动选择 * * */ //通过id查询用户 public test selectTestById(String id);&#125;``` - 创建测试类 ``` //动态代理 @Test public void Test1()throws IOException &#123; String resource = &quot;sqlMapConfig.xml&quot;; //读取配置文件 InputStream in = Resources.getResourceAsStream(resource); //创建SqlSessionFactory工厂 SqlSessionFactory factory = new SqlSessionFactoryBuilder().build(in); //生产一个SqlSession SqlSession session = factory.openSession(); TsetMapper mapper = session.getMapper(TsetMapper.class); test t = mapper.selectTestById(&quot;1&quot;); System.out.println(t.getName()); &#125; - 官方是比较推荐这种动态代理方式的，可以减少实现类代码的书写 ### 主配置文件SqlMapConfig.xml文件的说明 1. properties(读取配置文件) *** - 使用配置文件连接数据库 - 创建配置文件db.properties,注意原先的&amp;已经改成&号了 1234jdbc.driver =com.mysql.cj.jdbc.Driverjdbc.url =jdbc:mysql://localhost:3306/guohongming?allowPublicKeyRetrieval=true&amp;useSSL=false&amp;serverTimezone=UTCjdbc.username=rootjdbc.password=123456 修改配置文件中的这一段，然后随便测试下能否连接数据库 1234567&lt;!-- 使用连接池 连接数据库 --&gt; &lt;dataSource type=&quot;POOLED&quot;&gt; &lt;property name=&quot;driver&quot; value=&quot;$&#123;jdbc.driver&#125;&quot;/&gt; &lt;property name=&quot;url&quot; value=&quot;$&#123;jdbc.url&#125;&quot;/&gt; &lt;property name=&quot;username&quot; value=&quot;$&#123;jdbc.username&#125;&quot;/&gt; &lt;property name=&quot;password&quot; value=&quot;$&#123;jdbc.password&#125;&quot;/&gt; &lt;/dataSource&gt; 2. typeAliases类型别名 - 可以简化mapper.xml文件的resultType字段的写法 1234&lt;!--主配置文件中配置，为com.mybatis.bean.test配置别名为test--&gt;&lt;typeAliases&gt; &lt;typeAlias type=&quot;com.mybatis.bean.test&quot; alias=&quot;test&quot;/&gt; &lt;/typeAliases&gt; 1234&lt;!-- mapper配置文件中使用别名，resultType中使用了 --&gt; &lt;select id=&quot;selectTestById&quot; parameterType=&quot;String&quot; resultType=&quot;test&quot;&gt; select * from test where id = #&#123;id&#125; &lt;/select&gt; 以包名的形式配置，可以实现批量配置， 1234&lt;!-- 推荐使用以包的形式来配置别名，包的形式会扫描主包和子包的所有类文件，默认以类名为别名，大小写不限 --&gt; &lt;typeAliases&gt; &lt;!-- &lt;typeAlias type=&quot;com.mybatis.bean.test&quot; alias=&quot;test&quot;/&gt;--&gt; &lt;package name=&quot;com.mybatis.bean&quot;/&gt; mappers 配置映射器位置 相对路径配置 123&lt;mappers&gt; &lt;mapper resource=&quot;syMapper.xml&quot;/&gt; &lt;/mappers&gt; 接口路径配置，直接这样是不行的，还需要将mapper文件复制到这个类的包路径下，并且名称与接口名称必须一致123456&lt;mappers&gt; &lt;mapper class=&quot;com.mybatis.mapper.TsetMapper&quot;/&gt; &lt;/mappers&gt;``` - 包名配置，，直接这样是不行的，还需要将mapper文件复制到这个类的包路径下，并且名称与接口名称必须一致 &lt;!-推荐使用这种方法，可以实现批量配置–&gt; 123456789101112131415### mybatis输入输出映射 1. 输入映射parameterType; 1. 基本类型 2. 自定义对象 3. 自定义包装类2. 输出映射resultType、resultMap 1. 基本类型 2. 自定义对象 3. 集合 4. resultMap（手动映射） ###### 手动映射resultMap &gt;当需要获取个别列，或者获取联合查询时使用VO类（包装类）时使用 &gt;&gt;当如果bean类中的成员变量名称与表中的名称不一致时，需要使用resultMap //例 12345### 动态代理图解 graph TD A(sqlMapConfig.xml)-->|Mappers指定resource映射|B(Mapper.xml) B–&gt;|namespace中指定接口包名,以及select的id为接口中的方法名|C(动态代理接口)C–&gt;|通过session.getMapper方法创建接口对象,参数为类名.class,然后通过对象操作数据库|E(测试类)A–&gt;|获取主配置文件|E 1234### 一对一联合查询 &gt;country是一张表，写一个一对一查询的VO类 package com.mybatis.bean; public class testCountryVo extends test { //通过继承的方法将test类引入，此时会自动匹配到其中的成员变量 //包装类 private country country; public country getCountry() &#123; return country; &#125; public void setCountry(country country) &#123; this.country = country; &#125; @Override public String toString() &#123; return &quot;testCountryVo [country=&quot; + country + &quot;, getName()=&quot; + getName() + &quot;]&quot;; &#125; } 12&gt;查询语句 &lt;!-- 一对一查询test表和country表的记录,直接用以下的形式会导致country查询的数据无法映射到VO类 --&gt; &lt;!-- &lt;select id=&quot;selectTC&quot; resultType=&quot;testCountryVo&quot;&gt; select * from test t left join country c on t.id = c.id &lt;/select&gt; --&gt; &lt;!-- 一对一查询正确方式 --&gt; &lt;!-- 开始手动映射 --&gt; &lt;resultMap type=&quot;testCountryVo&quot; id=&quot;ctvo&quot;&gt; &lt;!-- 多表查询时必须全部进行映射 --&gt; &lt;result property=&quot;name&quot; column=&quot;name&quot;/&gt; &lt;!-- 以下时一对一的映射 --&gt; &lt;association property=&quot;country&quot; javaType=&quot;country&quot;&gt; &lt;!-- 这里面result和id的区别是，id指定主键，result指定其他，如果都用id也不会出错，官方给的解释是可以提高性能 --&gt; &lt;id property=&quot;id&quot; column=&quot;id&quot;/&gt; &lt;result property=&quot;country&quot; column=&quot;country&quot;/&gt; &lt;result property=&quot;city&quot; column=&quot;city&quot;/&gt; &lt;/association&gt; &lt;/resultMap&gt; &lt;select id=&quot;selectTC&quot; resultMap=&quot;ctvo&quot;&gt; select t.name,c.id,c.country,c.city from test t left join country c on t.id = c.id &lt;/select&gt; 1234567### 一对多查询 &gt;上述的一对一查询，是指一个人对应一个国家，所以会将没有国家的人也查询出来。sql语句是： select t.name,c.id,c.country,c.city from test t left join country c on t.id = c.id&gt;&gt;现在的一对多查询指的是一个国家对应多个人民，所以不会将没有国家的人也查询出来，sql语句是: select * from country c left join test t on t.id = c.id; 包装类 package com.mybatis.bean; import java.util.List; public class countryTestVo extends country{ //需要维护一个test集合 private List testlist; public List&lt;test&gt; getTestlist() &#123; return testlist; &#125; public void setTestlist(List&lt;test&gt; testlist) &#123; this.testlist = testlist; &#125; @Override public String toString() &#123; // return &quot;countryTestVo [testlist=&quot; + testlist + &quot;, toString()=&quot; + super.toString() + &quot;]&quot;; return super.toString() + testlist; &#125; } 12配置 &lt;resultMap type=&quot;countryTestVo&quot; id=&quot;tcvo&quot;&gt; &lt;id property=&quot;id&quot; column=&quot;id&quot;/&gt; &lt;result property=&quot;country&quot; column=&quot;country&quot;/&gt; &lt;result property=&quot;city&quot; column=&quot;city&quot;/&gt; &lt;!-- 一对多查询 --&gt; &lt;collection property=&quot;testlist&quot; ofType=&quot;test&quot;&gt;&lt;!-- property对应countryTestVo类中的testlist变量,由于返回值是list泛型，所以用ofType --&gt; &lt;result property=&quot;name&quot; column=&quot;name&quot;/&gt; &lt;/collection&gt; &lt;/resultMap&gt; &lt;select id=&quot;selectCT&quot; resultMap=&quot;tcvo&quot;&gt; select c.id,c.country,c.city,t.name from country c left join test t on t.id = c.id; &lt;/select&gt; 123### Mybatis动态sql，更方便拼接的sql语句 1. if标签和where标签；-多条件查询，获取用户列表 &lt;select id=&quot;selectTestByTest&quot; parameterType=&quot;test&quot; resultType=&quot;test&quot;&gt; select * from test where name like &quot;%&quot;#&#123;name&#125;&quot;%&quot; and money&gt;#&#123;money&#125; &lt;/select&gt; 1 &lt;select id=&quot;selectTestByTest&quot; parameterType=&quot;test&quot; resultType=&quot;test&quot;&gt; SELECT * FROM test &lt;where&gt; &lt;!-- where标签可以去掉开头的and --&gt; &lt;if test=&quot;name!=null&quot;&gt; and name like &quot;%&quot;#&#123;name&#125;&quot;%&quot; &lt;/if&gt; &lt;if test=&quot;money!=null&quot;&gt; and money = money &lt;/if&gt; &lt;/where&gt; &lt;/select&gt; 1232. trim标签 定制where标签的规则 &lt;select id=&quot;selectTestByTest&quot; parameterType=&quot;test&quot; resultType=&quot;test&quot;&gt; SELECT * FROM test &lt;trim prefix=&quot;where&quot; suffixOverrides=&quot;and |or&quot;&gt; &lt;!--prefix替换掉第一个trim suffix替换后面的tirm suffixOverrides替换掉最后面的and或者or prefixOverrides=&quot;and&quot;替换掉最后面的and--&gt; &lt;if test=&quot;name!=null&quot;&gt; and name like &quot;%&quot;#&#123;name&#125;&quot;%&quot; &lt;/if&gt; &lt;if test=&quot;money!=null&quot;&gt; and money = money &lt;/if&gt; &lt;/trim&gt; &lt;/select&gt; 1233. set标签 - 解决更新数据表时字符串拼接逗号问题4. foreach标签 -如果需要in查询多条相同数据，可以使用foreach遍历 &lt;select id=&quot;selectByIn&quot; resultType=&quot;test&quot;&gt; select * from test where id IN &lt;!--如果传递的是数组collection是array如果是数组就是list--&gt; &lt;foreach collection=&quot;array&quot; item=&quot;id&quot; open=&quot;(&quot; close=&quot;)&quot; separator=&quot;,&quot;&gt; #&#123;id&#125; &lt;/foreach&gt; &lt;/select&gt; 1235. sql标签： 可以提取重复的SQL语句片段，使之重用 &lt;sql id=&quot;myselect&quot;&gt; select * from test &lt;/sql&gt; where id IN #{id} 123456789101112131415161718### Mybatis Generator(MBG) - 作用：根据数据表自动生成bean对象，Java接口及SqlMapper.xml配置文件- 官方文档：http://www.mybatis.org/generator/- 下载地址: http://github.com/mybatis/generator/releases 1. 搭建MBG项目： 1. 下载MBG核心包 2. 创建Java项目 3. 从官方文档中获取配置表、实例代码 4. 导入依赖包2. MBG配置以及根据数据表生成所需要的配置文件（Bean、Interface、Mapper.xml)3. 使用自动生成的文件操作数据库 ==- 两种：普通项目 和 maven项目==##### 操作步骤（第一种 普通项目）创建Java项目，在src目录下创建一个config.xml文件 &lt;javaModelGenerator targetPackage=&quot;com.guo.bean&quot; targetProject=&quot;src&quot;&gt; &lt;!-- enableSubPackages是否需要开启子包名称 是否在包名后面加上scheme名称 --&gt; &lt;property name=&quot;enableSubPackages&quot; value=&quot;false&quot; /&gt; &lt;!--在set方法中加入.trim去掉空格 --&gt; &lt;property name=&quot;trimStrings&quot; value=&quot;true&quot; /&gt; &lt;/javaModelGenerator&gt; &lt;!-- mapper.xml配置 --&gt; &lt;sqlMapGenerator targetPackage=&quot;com.guo.mapper&quot; targetProject=&quot;src&quot;&gt; &lt;property name=&quot;enableSubPackages&quot; value=&quot;true&quot; /&gt; &lt;/sqlMapGenerator&gt; &lt;!-- Java接口配置 --&gt; &lt;javaClientGenerator type=&quot;XMLMAPPER&quot; targetPackage=&quot;com.guo.mapper&quot; targetProject=&quot;src&quot;&gt; &lt;property name=&quot;enableSubPackages&quot; value=&quot;true&quot; /&gt; &lt;/javaClientGenerator&gt; &lt;!-- 数据表,要根据数据库中的表来生成 --&gt; &lt;table tableName=&quot;test&quot;/&gt; &lt;table tableName=&quot;country&quot;/&gt; 1234导入相关包 创建一个测试类 ，运行后自动生成 package com.guo.test; import java.io.File;import java.util.ArrayList;import java.util.List; import org.mybatis.generator.api.MyBatisGenerator;import org.mybatis.generator.config.Configuration;import org.mybatis.generator.config.xml.ConfigurationParser;import org.mybatis.generator.internal.DefaultShellCallback; public class Generator {public static void main(String[] args) throws Exception{ List warnings = new ArrayList(); boolean overwrite = true; File configFile = new File(“src/config.xml”); ConfigurationParser cp = new ConfigurationParser(warnings); Configuration config = cp.parseConfiguration(configFile);//(configFile); DefaultShellCallback callback = new DefaultShellCallback(overwrite); MyBatisGenerator myBatisGenerator = new MyBatisGenerator(config, callback, warnings); myBatisGenerator.generate(null);}} 123将相关的配置文件配置好如SqlMapConfig.xml 进行测试 @Test public void test2() throws IOException{ String resource = “sqlMapConfig.xml”; InputStream in = Resources.getResourceAsStream(resource); SqlSessionFactory factory = new SqlSessionFactoryBuilder().build(in); SqlSession session = factory.openSession(); TestMapper mapper = session.getMapper(TestMapper.class); TestExample example = new TestExample(); example.createCriteria().andNameLike(&quot;%王%&quot;); List&lt;com.guo.bean.Test&gt; t = mapper.selectByExample(example); System.out.println(t); } 12##### 第二种（springboot项目为例）- pom.xml文件添加如下依赖以及插件 &lt;dependency&gt; &lt;groupId&gt;org.mybatis.spring.boot&lt;/groupId&gt; &lt;artifactId&gt;mybatis-spring-boot-starter&lt;/artifactId&gt; &lt;version&gt;1.3.1&lt;/version&gt; &lt;/dependency&gt; &lt;dependency&gt; &lt;groupId&gt;mysql&lt;/groupId&gt; &lt;artifactId&gt;mysql-connector-java&lt;/artifactId&gt; &lt;version&gt;8.0.15&lt;/version&gt; &lt;/dependency&gt; &lt;dependency&gt; &lt;groupId&gt;org.mybatis.generator&lt;/groupId&gt; &lt;artifactId&gt;mybatis-generator-core&lt;/artifactId&gt; &lt;version&gt;1.3.6&lt;/version&gt; &lt;/dependency&gt; &lt;!--使用完必须注释掉下面这个插件--&gt; &lt;plugin&gt; &lt;groupId&gt;org.mybatis.generator&lt;/groupId&gt; &lt;artifactId&gt;mybatis-generator-maven-plugin&lt;/artifactId&gt; &lt;version&gt;1.3.2&lt;/version&gt; &lt;configuration&gt; &lt;configurationFile&gt;src/main/resources/genernateConfig.xml&lt;/configurationFile&gt; &lt;!--上面是配置文件的位置--&gt; &lt;overwrite&gt;true&lt;/overwrite&gt; &lt;verbose&gt;true&lt;/verbose&gt; &lt;/configuration&gt; &lt;/plugin&gt; 12- 配置文件genernateConfig.xml 12- 引用的datasource.properties db.driverClassName = com.mysql.cj.jdbc.Driver db.url = jdbc:mysql://localhost:3306/twelve?serverTimezone=UTC&useUnicode=true&characterEncoding=utf-8&useSSL=true db.username = root db.password = 你的密码 123- 上面是比较详细的，下面是简约的(省去许多默认的) 1234567- 启动1. 右击项目---&gt;run maven-Plugins--&gt;mybatis-generator--&gt;双击 ##### 一对一、一对多、多对多自动生成配置方法 - 一对一 ``` ### Mybatis与Spring整合 - 导入相关包 - 新建一个spring配置文件applicationContext.xml 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;&lt;beans xmlns=&quot;http://www.springframework.org/schema/beans&quot; xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot; xmlns:aop=&quot;http://www.springframework.org/schema/aop&quot; xmlns:tx=&quot;http://www.springframework.org/schema/tx&quot; xsi:schemaLocation=&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.0.xsd http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-3.0.xsd http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-3.0.xsd&quot;&gt; &lt;!-- &lt;bean id=&quot;dataSource&quot; class=&quot;org.springframework.jdbc.datasource.DriverManagerDataSource&quot;&gt; &lt;property name=&quot;driverClassName&quot;&gt;&lt;value&gt;com.mysql.cj.jdbc.Driver&lt;/value&gt;&lt;/property&gt; &lt;property name=&quot;url&quot;&gt;&lt;value&gt;jdbc:mysql://localhost:3306/guohongming?useUnicode=true&amp;amp;characterEncoding=UTF-8&amp;amp;serverTimezone=UTC&lt;/value&gt;&lt;/property&gt; &lt;property name=&quot;username&quot;&gt;&lt;value&gt;root&lt;/value&gt;&lt;/property&gt; &lt;property name=&quot;password&quot;&gt;&lt;value&gt;123456&lt;/value&gt;&lt;/property&gt; &lt;/bean&gt; --&gt; &lt;!-- 配置连接池 --&gt; &lt;bean name=&quot;dataSource&quot; class=&quot;com.mchange.v2.c3p0.ComboPooledDataSource&quot;&gt; &lt;property name=&quot;driverClass&quot;&gt;&lt;value&gt;com.mysql.cj.jdbc.Driver&lt;/value&gt;&lt;/property&gt; &lt;property name=&quot;jdbcUrl&quot;&gt;&lt;value&gt;jdbc:mysql://localhost:3306/guohongming?useUnicode=true&amp;amp;characterEncoding=UTF-8&amp;amp;serverTimezone=UTC&lt;/value&gt;&lt;/property&gt; &lt;property name=&quot;user&quot;&gt;&lt;value&gt;root&lt;/value&gt;&lt;/property&gt; &lt;property name=&quot;password&quot;&gt;&lt;value&gt;123456&lt;/value&gt;&lt;/property&gt; &lt;/bean&gt; &lt;!--配置mybatis sqlSessionFactory --&gt; &lt;bean id=&quot;sqlSessionFactoryBean&quot; class=&quot;org.mybatis.spring.SqlSessionFactoryBean&quot;&gt; &lt;property name=&quot;dataSource&quot; ref=&quot;dataSource&quot;/&gt; &lt;property name=&quot;configLocation&quot; value=&quot;classpath:sqlMapConfig.xml&quot;/&gt; &lt;/bean&gt; &lt;bean id=&quot;testDao&quot; class=&quot;com.guo.dao.TestDaoImpl&quot;&gt; &lt;property name=&quot;sqlSessionFactory&quot; ref=&quot;sqlSessionFactoryBean&quot;/&gt; &lt;/bean&gt; &lt;!-- mapper动态代理 --&gt; &lt;!-- &lt;bean id=&quot;testMapper&quot; class=&quot;org.mybatis.spring.mapper.MapperFactoryBean&quot;&gt; 注入sqlSessionFactory &lt;property name=&quot;sqlSessionFactory&quot; ref=&quot;sqlSessionFactoryBean&quot;/&gt; 配置接口 &lt;property name=&quot;mapperInterface&quot; value=&quot;com.guo.mapper.TestMapper&quot;/&gt; &lt;/bean&gt; --&gt; &lt;!-- mapper动态扫描开发 --&gt; &lt;bean class=&quot;org.mybatis.spring.mapper.MapperScannerConfigurer&quot;&gt; &lt;property name=&quot;basePackage&quot; value=&quot;com.guo.mapper&quot;/&gt; &lt;/bean&gt;&lt;/beans&gt; ``` - 配置mybatis的主配置文件sqlMapConfig.xml ``` - 建立和编写好相关javabean类 DAO层开发参考资料","tags":[{"name":"mybatis","slug":"mybatis","permalink":"https://github.com/ghm0824/blog/tags/mybatis/"}],"categories":[{"name":"框架","slug":"框架","permalink":"https://github.com/ghm0824/blog/categories/%E6%A1%86%E6%9E%B6/"},{"name":"MyBatis","slug":"框架/MyBatis","permalink":"https://github.com/ghm0824/blog/categories/%E6%A1%86%E6%9E%B6/MyBatis/"}]},{"title":"Welcome guohm's blog","date":"2021-05-08T17:55:57.000Z","path":"wiki/index/","text":"时间从来不语，却回答了所有问题这是个人 搭建的blog 站点，主要记录一些自己总结的只言片语的零散知识点。 非礼勿视，谢谢！","tags":[],"categories":[]},{"title":"java常见错误汇总","date":"2021-03-12T11:34:55.000Z","path":"wiki/java/常见错误/java常见错误汇总/","text":"什么都没有呢 测试test1","tags":[{"name":"java","slug":"java","permalink":"https://github.com/ghm0824/blog/tags/java/"}],"categories":[{"name":"java","slug":"java","permalink":"https://github.com/ghm0824/blog/categories/java/"},{"name":"常见错误","slug":"java/常见错误","permalink":"https://github.com/ghm0824/blog/categories/java/%E5%B8%B8%E8%A7%81%E9%94%99%E8%AF%AF/"}]}],"categories":[{"name":"框架","slug":"框架","permalink":"https://github.com/ghm0824/blog/categories/%E6%A1%86%E6%9E%B6/"},{"name":"MyBatis","slug":"框架/MyBatis","permalink":"https://github.com/ghm0824/blog/categories/%E6%A1%86%E6%9E%B6/MyBatis/"},{"name":"java","slug":"java","permalink":"https://github.com/ghm0824/blog/categories/java/"},{"name":"常见错误","slug":"java/常见错误","permalink":"https://github.com/ghm0824/blog/categories/java/%E5%B8%B8%E8%A7%81%E9%94%99%E8%AF%AF/"}],"tags":[{"name":"mybatis","slug":"mybatis","permalink":"https://github.com/ghm0824/blog/tags/mybatis/"},{"name":"java","slug":"java","permalink":"https://github.com/ghm0824/blog/tags/java/"}]}