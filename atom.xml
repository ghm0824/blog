<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>GuoHM</title>
  
  
  <link href="https://github.com/ghm0824/blog/atom.xml" rel="self"/>
  
  <link href="https://github.com/ghm0824/blog/"/>
  <updated>2021-05-09T07:22:23.829Z</updated>
  <id>https://github.com/ghm0824/blog/</id>
  
  <author>
    <name>guohm</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>MyBatis</title>
    <link href="https://github.com/ghm0824/blog/wiki/%E6%A1%86%E6%9E%B6/MyBatis/MyBatis/"/>
    <id>https://github.com/ghm0824/blog/wiki/%E6%A1%86%E6%9E%B6/MyBatis/MyBatis/</id>
    <published>2021-05-09T06:51:06.000Z</published>
    <updated>2021-05-09T07:22:23.829Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Mybatis架构图"><a href="#Mybatis架构图" class="headerlink" title="Mybatis架构图"></a>Mybatis架构图</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">graph TD  </span><br><span class="line">  A(Mybatis配置文件)--&gt;B(主配置文件sqlMapConfig.xml)</span><br><span class="line">  A--&gt;Q(Mapper1.xml)</span><br><span class="line">  Q--&gt;C</span><br><span class="line">  B--&gt;C(SqlSessionFactorysession工厂)</span><br><span class="line">  C --&gt;D( SqlSession 对外提供的接口) </span><br><span class="line">  D--&gt;F(Excutor 执行者)</span><br><span class="line">  F--&gt;L(MappedStatement)</span><br><span class="line">  L--&gt;H((数据库))</span><br><span class="line">```  </span><br><span class="line">### 搭建Mybatis项目   </span><br><span class="line">1. 下载Mybatis压缩包https://github.com/mybatis/mybatis-3/release，将解压后的mybatis-3.4.6.jar包和lib目录下的jar包全部导入</span><br><span class="line">2. 参考资料：官方基础教程http://www.mybatis.org/mybatis-3/zh/getting-started.html</span><br><span class="line">3. 创建测试用例，测试数据库，测试bean对象</span><br><span class="line">4. 创建sqlMapConfig.xml主配置文件</span><br></pre></td></tr></table></figure><?xml version="1.0" encoding="UTF-8" ?><!DOCTYPE configuration  PUBLIC "-//mybatis.org//DTD Config 3.0//EN"  "http://mybatis.org/dtd/mybatis-3-config.dtd"><configuration>  <environments default="development">  <!-- 在集成spring 是不用 -->    <environment id="development">    <!-- 使用JDBC事务 -->      <transactionManager type="JDBC"/>      <!-- 使用连接池 连接数据库 -->      <dataSource type="POOLED">        <property name="driver" value="com.mysql.cj.jdbc.Driver"/>        <property name="url" value="jdbc:mysql://localhost:3306/guohongming?allowPublicKeyRetrieval=true&amp;useSSL=false&amp;serverTimezone=UTC"/>        <property name="username" value="root"/>        <property name="password" value="123456"/>      </dataSource>    </environment>  </environments>    <mappers>    <mapper resource="syMapper.xml"/>  </mappers></configuration><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">5. 创建Mapper.xml文件</span><br><span class="line">```  </span><br><span class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;</span><br><span class="line">&lt;!DOCTYPE mapper</span><br><span class="line">  PUBLIC &quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span><br><span class="line">  &quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;&gt;</span><br><span class="line">  &lt;mapper namespace=&quot;SyMapper&quot;&gt;</span><br><span class="line">    &lt;select id=&quot;selectSyById&quot; parameterType=&quot;String&quot; resultType=&quot;com.mybatis.bean.sy&quot;&gt;</span><br><span class="line">       select * from sy where id = #&#123;id&#125;</span><br><span class="line">    &lt;/select&gt;</span><br><span class="line">  &lt;/mapper&gt;</span><br></pre></td></tr></table></figure>6. 导入约束7. 使用mybatis对数据表进行增删改查8. 通过ID查询<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line">@Test</span><br><span class="line">   //通过ID查询用户</span><br><span class="line">   public void test() throws IOException&#123;</span><br><span class="line">   String resource = &quot;sqlMapConfig.xml&quot;;</span><br><span class="line">   //读取配置文件</span><br><span class="line">   InputStream in = Resources.getResourceAsStream(resource);</span><br><span class="line">   </span><br><span class="line">   //获取sqlSessionFactoryBulider</span><br><span class="line">   SqlSessionFactoryBuilder ssfb = new SqlSessionFactoryBuilder();</span><br><span class="line">   </span><br><span class="line">   //创建sqlSessionFactory</span><br><span class="line">   SqlSessionFactory sessionFactory = ssfb.build(in);</span><br><span class="line">   </span><br><span class="line">   //生产sqlSession</span><br><span class="line">   SqlSession session = sessionFactory.openSession();</span><br><span class="line">   </span><br><span class="line">   //操作数据库</span><br><span class="line">   //参数1：要操作的sql语句 参数2:sql语句的参数</span><br><span class="line">   sy sy =session.selectOne(&quot;SyMapper.selectSyById&quot;, &quot;1&quot;);</span><br><span class="line">   System.out.println(sy.getSy());</span><br><span class="line">   &#125;</span><br><span class="line">```  </span><br><span class="line">9. 模糊查询</span><br><span class="line">   1. Mapper.xml中配置sql语句</span><br><span class="line">   2. 操作数据库</span><br><span class="line">```  </span><br><span class="line">&lt;!-- 字段拼接必须使用$&#123;value&#125;字段 --&gt;</span><br><span class="line">     &lt;select id=&quot;selectTestByName&quot; parameterType=&quot;String&quot; resultType=&quot;com.mybatis.bean.test&quot;&gt;</span><br><span class="line">         &lt;!-- 字段拼接必须使用$&#123;value&#125;字段 --&gt;</span><br><span class="line">     &lt;select id=&quot;selectTestByName&quot; parameterType=&quot;String&quot; resultType=&quot;com.mybatis.bean.test&quot;&gt;</span><br><span class="line">     &lt;!-- 下面这种方式  字符串拼接方式，容易被SQL注入 --&gt;</span><br><span class="line">       &lt;!--  select * from test where name LIKE &#x27;%$&#123;value&#125;%&#x27;   --&gt; </span><br><span class="line">       &lt;!-- 推荐下面这种方法  占位符方法#&#123;&#125; --&gt;</span><br><span class="line">       select * from test where name LIKE &quot;%&quot;#&#123;name&#125;&quot;%&quot;</span><br><span class="line">     &lt;/select&gt;</span><br><span class="line">```  </span><br><span class="line">```  </span><br><span class="line"> //模糊查询</span><br><span class="line">   List&lt;test&gt; list = session.selectList(&quot;SyMapper.selectTestByName&quot;,&quot;王&quot;); </span><br><span class="line">   for(test t:list) &#123;</span><br><span class="line">   System.out.println(t.getName());</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure>10. 更新数据  <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">//操作数据库</span><br><span class="line">   </span><br><span class="line">   //更新数据</span><br><span class="line">   test t = new test();</span><br><span class="line">   t.setId(&quot;4&quot;);</span><br><span class="line">   t.setName(&quot;李艾&quot;);</span><br><span class="line">   t.setMoney(20.4f);</span><br><span class="line">   session.update(&quot;SyMapper.updateTest&quot;, t);</span><br><span class="line">   </span><br><span class="line">   //提交事务</span><br><span class="line">   session.commit();</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- 更新数据 --&gt;</span><br><span class="line">     &lt;update id=&quot;updateTest&quot; parameterType=&quot;com.mybatis.bean.test&quot;&gt;</span><br><span class="line">         update test set name = #&#123;name&#125; where id = #&#123;id&#125;</span><br><span class="line">     &lt;/update&gt;</span><br></pre></td></tr></table></figure>11. 删除数据、插入数据类似，不再赘述  ### Mapper动态代理  - 创建动态代理接口<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line">//动态代理接口</span><br><span class="line">public interface TsetMapper &#123;</span><br><span class="line">/*</span><br><span class="line"> * Mapper动态代理开发四大原则</span><br><span class="line"> * </span><br><span class="line">1. mapper.xml文件的namespace字段为接口的全包名com.mybatis.mapper.TsetMapper</span><br><span class="line">2. 接口名和配置文件名mapper相同，接口方法名必须与mapper.xml的要调用的sql语句的id一致</span><br><span class="line">3. 接口的方法形参类型需要与mapper.xml中的parameterType一致</span><br><span class="line">4. 接口的方法返回值类型需要与mapper.xml 中的resultType一致</span><br><span class="line">5. 注意mapper动态代理开发中，使用的是session使用的是selectOne还是selectList会根据返回类型自动选择</span><br><span class="line"> * </span><br><span class="line"> * */</span><br><span class="line"></span><br><span class="line">//通过id查询用户</span><br><span class="line">public test selectTestById(String id);</span><br><span class="line">&#125;</span><br><span class="line">```  </span><br><span class="line">- 创建测试类  </span><br><span class="line">```  </span><br><span class="line"> //动态代理</span><br><span class="line">@Test</span><br><span class="line">public void Test1()throws IOException &#123;</span><br><span class="line">String resource = &quot;sqlMapConfig.xml&quot;;</span><br><span class="line">//读取配置文件</span><br><span class="line">InputStream in = Resources.getResourceAsStream(resource);</span><br><span class="line"></span><br><span class="line">//创建SqlSessionFactory工厂</span><br><span class="line">SqlSessionFactory  factory = new SqlSessionFactoryBuilder().build(in);</span><br><span class="line"></span><br><span class="line">//生产一个SqlSession</span><br><span class="line">SqlSession session = factory.openSession();</span><br><span class="line"></span><br><span class="line">TsetMapper mapper = session.getMapper(TsetMapper.class);</span><br><span class="line"></span><br><span class="line">test t = mapper.selectTestById(&quot;1&quot;);</span><br><span class="line">System.out.println(t.getName());</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>- 官方是比较推荐这种动态代理方式的，可以减少实现类代码的书写### 主配置文件SqlMapConfig.xml文件的说明  1. properties(读取配置文件)***- 使用配置文件连接数据库    - 创建配置文件db.properties,注意原先的&amp;已经改成&号了    <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">jdbc.driver =com.mysql.cj.jdbc.Driver</span><br><span class="line">jdbc.url =jdbc:mysql://localhost:3306/guohongming?allowPublicKeyRetrieval=true&amp;useSSL=false&amp;serverTimezone=UTC</span><br><span class="line">jdbc.username=root</span><br><span class="line">jdbc.password=123456</span><br></pre></td></tr></table></figure>   修改配置文件中的这一段，然后随便测试下能否连接数据库   <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- 使用连接池 连接数据库 --&gt;</span><br><span class="line">      &lt;dataSource type=&quot;POOLED&quot;&gt;</span><br><span class="line">        &lt;property name=&quot;driver&quot; value=&quot;$&#123;jdbc.driver&#125;&quot;/&gt;</span><br><span class="line">        &lt;property name=&quot;url&quot; value=&quot;$&#123;jdbc.url&#125;&quot;/&gt;</span><br><span class="line">        &lt;property name=&quot;username&quot; value=&quot;$&#123;jdbc.username&#125;&quot;/&gt;</span><br><span class="line">        &lt;property name=&quot;password&quot; value=&quot;$&#123;jdbc.password&#125;&quot;/&gt;</span><br><span class="line">      &lt;/dataSource&gt;</span><br></pre></td></tr></table></figure>2. typeAliases类型别名- 可以简化mapper.xml文件的resultType字段的写法<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;!--主配置文件中配置，为com.mybatis.bean.test配置别名为test--&gt;</span><br><span class="line">&lt;typeAliases&gt;</span><br><span class="line">      &lt;typeAlias type=&quot;com.mybatis.bean.test&quot; alias=&quot;test&quot;/&gt;</span><br><span class="line">  &lt;/typeAliases&gt;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- mapper配置文件中使用别名，resultType中使用了 --&gt;</span><br><span class="line">    &lt;select id=&quot;selectTestById&quot; parameterType=&quot;String&quot; resultType=&quot;test&quot;&gt;</span><br><span class="line">        select * from test where id = #&#123;id&#125;</span><br><span class="line">    &lt;/select&gt;</span><br></pre></td></tr></table></figure><ul><li>以包名的形式配置，可以实现批量配置，</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- 推荐使用以包的形式来配置别名，包的形式会扫描主包和子包的所有类文件，默认以类名为别名，大小写不限 --&gt;</span><br><span class="line">  &lt;typeAliases&gt;</span><br><span class="line">      &lt;!--    &lt;typeAlias type=&quot;com.mybatis.bean.test&quot; alias=&quot;test&quot;/&gt;--&gt;</span><br><span class="line">      &lt;package name=&quot;com.mybatis.bean&quot;/&gt;</span><br></pre></td></tr></table></figure><ol start="3"><li>mappers 配置映射器位置</li></ol><ul><li>相对路径配置</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;mappers&gt;</span><br><span class="line">   &lt;mapper resource=&quot;syMapper.xml&quot;/&gt;</span><br><span class="line"> &lt;/mappers&gt;</span><br></pre></td></tr></table></figure><ul><li>接口路径配置，直接这样是不行的，还需要将mapper文件复制到这个类的包路径下，并且名称与接口名称必须一致<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;mappers&gt;</span><br><span class="line">    &lt;mapper class=&quot;com.mybatis.mapper.TsetMapper&quot;/&gt;</span><br><span class="line">  &lt;/mappers&gt;</span><br><span class="line">```  </span><br><span class="line">- 包名配置，，直接这样是不行的，还需要将mapper文件复制到这个类的包路径下，并且名称与接口名称必须一致</span><br><span class="line"></span><br></pre></td></tr></table></figure>&lt;!-推荐使用这种方法，可以实现批量配置–&gt;<mappers>  <package name="com.mybatis.bean"/></mappers><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">### mybatis输入输出映射  </span><br><span class="line">1. 输入映射parameterType;</span><br><span class="line">    1. 基本类型</span><br><span class="line">    2. 自定义对象</span><br><span class="line">    3. 自定义包装类</span><br><span class="line">2. 输出映射resultType、resultMap  </span><br><span class="line">    1. 基本类型</span><br><span class="line">    2. 自定义对象</span><br><span class="line">    3. 集合</span><br><span class="line">    4. resultMap（手动映射）  </span><br><span class="line"></span><br><span class="line">###### 手动映射resultMap  </span><br><span class="line">&gt;当需要获取个别列，或者获取联合查询时使用VO类（包装类）时使用  </span><br><span class="line">&gt;&gt;当如果bean类中的成员变量名称与表中的名称不一致时，需要使用resultMap  </span><br><span class="line"></span><br></pre></td></tr></table></figure>//例<!-- 手动映射，配置resultMap--><!--type是返回值,就是对应的bean类,id对应下面查询resultMap的值--><resultMap type="Country" id="id"> <result property="id" column="c_id"/><!--将表的c_id列映射到bean类的id变量--></resultMap><!--id对应mapper接口的方法名，resultMap对应上面的id--><select id="selectAll" resultMap="id"></select><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line">### 动态代理图解  </span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>graph TDA(sqlMapConfig.xml)-->|Mappers指定resource映射|B(Mapper.xml)</li></ul><p>B–&gt;|namespace中指定接口包名,以及select的id为接口中的方法名|C(动态代理接口)<br>C–&gt;|通过session.getMapper方法创建接口对象,参数为类名.class,然后通过对象操作数据库|E(测试类)<br>A–&gt;|获取主配置文件|E</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">### 一对一联合查询  </span><br><span class="line">&gt;country是一张表，写一个一对一查询的VO类</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>package com.mybatis.bean;</p><p>public class testCountryVo extends test {<br>    //通过继承的方法将test类引入，此时会自动匹配到其中的成员变量</p><p>   //包装类<br>    private country country;</p><pre><code>public country getCountry() &#123;    return country;&#125;public void setCountry(country country) &#123;    this.country = country;&#125;@Overridepublic String toString() &#123;    return &quot;testCountryVo [country=&quot; + country + &quot;, getName()=&quot; + getName() + &quot;]&quot;;&#125;</code></pre><p>}</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt;查询语句  </span><br><span class="line"></span><br></pre></td></tr></table></figure><pre><code> &lt;!-- 一对一查询test表和country表的记录,直接用以下的形式会导致country查询的数据无法映射到VO类 --&gt; &lt;!-- &lt;select id=&quot;selectTC&quot; resultType=&quot;testCountryVo&quot;&gt;   select * from test t left join country c on t.id = c.id &lt;/select&gt; --&gt;  &lt;!-- 一对一查询正确方式 --&gt; &lt;!-- 开始手动映射 --&gt; &lt;resultMap type=&quot;testCountryVo&quot; id=&quot;ctvo&quot;&gt;    &lt;!-- 多表查询时必须全部进行映射 --&gt;        &lt;result property=&quot;name&quot; column=&quot;name&quot;/&gt;    &lt;!-- 以下时一对一的映射 --&gt;    &lt;association property=&quot;country&quot; javaType=&quot;country&quot;&gt;       &lt;!-- 这里面result和id的区别是，id指定主键，result指定其他，如果都用id也不会出错，官方给的解释是可以提高性能 --&gt;       &lt;id property=&quot;id&quot; column=&quot;id&quot;/&gt;       &lt;result property=&quot;country&quot; column=&quot;country&quot;/&gt;       &lt;result property=&quot;city&quot; column=&quot;city&quot;/&gt;    &lt;/association&gt; &lt;/resultMap&gt; &lt;select id=&quot;selectTC&quot; resultMap=&quot;ctvo&quot;&gt;    select t.name,c.id,c.country,c.city from test t left join country c on t.id = c.id &lt;/select&gt;</code></pre><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">### 一对多查询  </span><br><span class="line">&gt;上述的一对一查询，是指一个人对应一个国家，所以会将没有国家的人也查询出来。sql语句是：  </span><br><span class="line">select t.name,c.id,c.country,c.city from test t left join country c on t.id = c.id</span><br><span class="line">&gt;&gt;现在的一对多查询指的是一个国家对应多个人民，所以不会将没有国家的人也查询出来，sql语句是:  </span><br><span class="line">select * from country c left join test t on t.id = c.id;  </span><br><span class="line"></span><br><span class="line">包装类</span><br></pre></td></tr></table></figure><p>package com.mybatis.bean;</p><p>import java.util.List;</p><p>public class countryTestVo extends country{</p><p>   //需要维护一个test集合<br>    private List<test> testlist;</p><pre><code>public List&lt;test&gt; getTestlist() &#123;    return testlist;&#125;public void setTestlist(List&lt;test&gt; testlist) &#123;    this.testlist = testlist;&#125;@Overridepublic String toString() &#123;    //        return &quot;countryTestVo [testlist=&quot; + testlist + &quot;, toString()=&quot; + super.toString() + &quot;]&quot;;    return super.toString() + testlist;&#125;</code></pre><p>}</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">配置  </span><br><span class="line"></span><br></pre></td></tr></table></figure><!-- 一对多查询 --><pre><code> &lt;resultMap type=&quot;countryTestVo&quot; id=&quot;tcvo&quot;&gt;      &lt;id property=&quot;id&quot; column=&quot;id&quot;/&gt;      &lt;result property=&quot;country&quot; column=&quot;country&quot;/&gt;      &lt;result property=&quot;city&quot; column=&quot;city&quot;/&gt;            &lt;!-- 一对多查询 --&gt;      &lt;collection property=&quot;testlist&quot; ofType=&quot;test&quot;&gt;&lt;!-- property对应countryTestVo类中的testlist变量,由于返回值是list泛型，所以用ofType --&gt;         &lt;result property=&quot;name&quot; column=&quot;name&quot;/&gt;      &lt;/collection&gt; &lt;/resultMap&gt; &lt;select id=&quot;selectCT&quot; resultMap=&quot;tcvo&quot;&gt;      select c.id,c.country,c.city,t.name from country c left join test t on t.id = c.id; &lt;/select&gt;</code></pre><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">###  Mybatis动态sql，更方便拼接的sql语句  </span><br><span class="line">1. if标签和where标签；-多条件查询，获取用户列表  </span><br><span class="line"></span><br></pre></td></tr></table></figure>  <!-- 多表查询 ,普通的多表查询--><pre><code> &lt;select id=&quot;selectTestByTest&quot; parameterType=&quot;test&quot; resultType=&quot;test&quot;&gt;    select * from test where name like &quot;%&quot;#&#123;name&#125;&quot;%&quot; and money&gt;#&#123;money&#125; &lt;/select&gt;</code></pre><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure><!--使用if进行多条件查询，可以实现不用传入完整参数进行字符串拼接-->   <!-- 多表查询 ,使用标签的多表查询--><pre><code> &lt;select id=&quot;selectTestByTest&quot; parameterType=&quot;test&quot; resultType=&quot;test&quot;&gt;    SELECT *    FROM test    &lt;where&gt;    &lt;!-- where标签可以去掉开头的and --&gt;    &lt;if test=&quot;name!=null&quot;&gt;      and name like &quot;%&quot;#&#123;name&#125;&quot;%&quot;    &lt;/if&gt;    &lt;if test=&quot;money!=null&quot;&gt;       and money = money    &lt;/if&gt;    &lt;/where&gt; &lt;/select&gt;</code></pre><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">2. trim标签  定制where标签的规则</span><br><span class="line"></span><br></pre></td></tr></table></figure><!--trim标签--> <!-- 多表查询 ,使用标签的多表查询--><pre><code> &lt;select id=&quot;selectTestByTest&quot; parameterType=&quot;test&quot; resultType=&quot;test&quot;&gt;    SELECT *    FROM test    &lt;trim prefix=&quot;where&quot; suffixOverrides=&quot;and |or&quot;&gt;    &lt;!--prefix替换掉第一个trim  suffix替换后面的tirm    suffixOverrides替换掉最后面的and或者or    prefixOverrides=&quot;and&quot;替换掉最后面的and--&gt;    &lt;if test=&quot;name!=null&quot;&gt;      and name like &quot;%&quot;#&#123;name&#125;&quot;%&quot;    &lt;/if&gt;    &lt;if test=&quot;money!=null&quot;&gt;       and money = money    &lt;/if&gt;    &lt;/trim&gt; &lt;/select&gt;</code></pre><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">3. set标签 - 解决更新数据表时字符串拼接逗号问题</span><br><span class="line">4. foreach标签 -如果需要in查询多条相同数据，可以使用foreach遍历</span><br><span class="line"></span><br></pre></td></tr></table></figure>  <!-- foreach标签的使用 --><pre><code>  &lt;select id=&quot;selectByIn&quot; resultType=&quot;test&quot;&gt;     select *      from test      where id      IN     &lt;!--如果传递的是数组collection是array如果是数组就是list--&gt;     &lt;foreach collection=&quot;array&quot; item=&quot;id&quot; open=&quot;(&quot; close=&quot;)&quot; separator=&quot;,&quot;&gt;        #&#123;id&#125;     &lt;/foreach&gt;  &lt;/select&gt;</code></pre><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">5. sql标签： 可以提取重复的SQL语句片段，使之重用</span><br><span class="line"></span><br></pre></td></tr></table></figure> <!-- sql标签 --><pre><code> &lt;sql id=&quot;myselect&quot;&gt;    select *    from test  &lt;/sql&gt;  </code></pre><select id="selectByIn" resultType="test">        <!--使用sql标签-->        <include refid="myselect"/>         where id          IN         <foreach collection="array" item="id" open="(" close=")" separator=",">            #{id}         </foreach>      </select><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">### Mybatis Generator(MBG)  </span><br><span class="line">- 作用：根据数据表自动生成bean对象，Java接口及SqlMapper.xml配置文件</span><br><span class="line">- 官方文档：http://www.mybatis.org/generator/</span><br><span class="line">- 下载地址: http://github.com/mybatis/generator/releases  </span><br><span class="line">1. 搭建MBG项目：</span><br><span class="line">    1. 下载MBG核心包</span><br><span class="line">    2. 创建Java项目</span><br><span class="line">    3. 从官方文档中获取配置表、实例代码</span><br><span class="line">    4. 导入依赖包</span><br><span class="line">2. MBG配置以及根据数据表生成所需要的配置文件（Bean、Interface、Mapper.xml)</span><br><span class="line">3. 使用自动生成的文件操作数据库  </span><br><span class="line">  </span><br><span class="line">==- 两种：普通项目 和 maven项目==</span><br><span class="line"></span><br><span class="line">##### 操作步骤（第一种 普通项目）</span><br><span class="line"></span><br><span class="line">创建Java项目，在src目录下创建一个config.xml文件</span><br><span class="line"></span><br></pre></td></tr></table></figure><?xml version="1.0" encoding="UTF-8"?><!DOCTYPE generatorConfiguration  PUBLIC "-//mybatis.org//DTD MyBatis Generator Configuration 1.0//EN"  "http://mybatis.org/dtd/mybatis-generator-config_1_0.dtd"><generatorConfiguration><!-- 配置数据库连接的包，由于已经将mysql-connection-java-8.-0.15包导入进来了，所以不用下面这句 --><!--   <classPathEntry location="/Program Files/IBM/SQLLIB/java/db2java.zip" /> -->  <context id="MyGenerator" targetRuntime="MyBatis3">     <!-- 这个标签可以去掉注释 -->   <commentGenerator>      <!--去掉注释  -->      <property name="suppressAllComments" value="true"/>      <!-- 去掉时间戳 -->      <property name="suppressDate" value="true"/>   </commentGenerator>    <!-- 数据库连接信息 -->    <jdbcConnection driverClass="com.mysql.cj.jdbc.Driver"        connectionURL="jdbc:mysql://localhost:3306/guohongming?allowPublicKeyRetrieval=true&amp;useSSL=false&amp;serverTimezone=UTC"        userId="root"        password="123456">    </jdbcConnection>  <!-- JAVA JDBC数据类型转换 -->    <javaTypeResolver >      <property name="forceBigDecimals" value="false" />    </javaTypeResolver><!-- javaModeGenerator javaBean配置 targetPackage 输入包名,输出路径 --><pre><code>&lt;javaModelGenerator targetPackage=&quot;com.guo.bean&quot; targetProject=&quot;src&quot;&gt;&lt;!-- enableSubPackages是否需要开启子包名称 是否在包名后面加上scheme名称 --&gt;  &lt;property name=&quot;enableSubPackages&quot; value=&quot;false&quot; /&gt;  &lt;!--在set方法中加入.trim去掉空格  --&gt;  &lt;property name=&quot;trimStrings&quot; value=&quot;true&quot; /&gt;&lt;/javaModelGenerator&gt;&lt;!-- mapper.xml配置 --&gt;&lt;sqlMapGenerator targetPackage=&quot;com.guo.mapper&quot;  targetProject=&quot;src&quot;&gt;  &lt;property name=&quot;enableSubPackages&quot; value=&quot;true&quot; /&gt;&lt;/sqlMapGenerator&gt;&lt;!-- Java接口配置 --&gt;&lt;javaClientGenerator type=&quot;XMLMAPPER&quot; targetPackage=&quot;com.guo.mapper&quot;  targetProject=&quot;src&quot;&gt;  &lt;property name=&quot;enableSubPackages&quot; value=&quot;true&quot; /&gt;&lt;/javaClientGenerator&gt;&lt;!-- 数据表,要根据数据库中的表来生成 --&gt;&lt;table tableName=&quot;test&quot;/&gt;&lt;table tableName=&quot;country&quot;/&gt;</code></pre>   <!--  <table schema="DB2ADMIN" tableName="ALLTYPES" domainObjectName="Customer" >      <property name="useActualColumnNames" value="true"/>      <generatedKey column="ID" sqlStatement="DB2" identity="true" />      <columnOverride column="DATE_FIELD" property="startDate" />      <ignoreColumn column="FRED" />      <columnOverride column="LONG_VARCHAR_FIELD" jdbcType="VARCHAR" />    </table> -->  </context></generatorConfiguration><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">导入相关包  </span><br><span class="line"></span><br><span class="line">创建一个测试类 ，运行后自动生成 </span><br><span class="line"></span><br></pre></td></tr></table></figure>package com.guo.test;<p>import java.io.File;<br>import java.util.ArrayList;<br>import java.util.List;</p><p>import org.mybatis.generator.api.MyBatisGenerator;<br>import org.mybatis.generator.config.Configuration;<br>import org.mybatis.generator.config.xml.ConfigurationParser;<br>import org.mybatis.generator.internal.DefaultShellCallback;</p><p>public class Generator {<br>public static void main(String[] args) throws Exception{<br>       List<String> warnings = new ArrayList<String>();<br>       boolean overwrite = true;<br>       File configFile = new File(“src/config.xml”);<br>       ConfigurationParser cp = new ConfigurationParser(warnings);<br>       Configuration config = cp.parseConfiguration(configFile);//(configFile);<br>       DefaultShellCallback callback = new DefaultShellCallback(overwrite);<br>       MyBatisGenerator myBatisGenerator = new MyBatisGenerator(config, callback, warnings);<br>       myBatisGenerator.generate(null);<br>}<br>}</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">将相关的配置文件配置好如SqlMapConfig.xml  </span><br><span class="line">进行测试  </span><br><span class="line"></span><br></pre></td></tr></table></figure><p>   @Test<br>   public void test2() throws IOException{<br>       String resource = “sqlMapConfig.xml”;<br>       InputStream in = Resources.getResourceAsStream(resource);</p><pre><code>   SqlSessionFactory factory = new SqlSessionFactoryBuilder().build(in);      SqlSession session = factory.openSession();      TestMapper mapper = session.getMapper(TestMapper.class);      TestExample example = new TestExample();   example.createCriteria().andNameLike(&quot;%王%&quot;);   List&lt;com.guo.bean.Test&gt; t = mapper.selectByExample(example);    System.out.println(t);</code></pre><p>   }</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">##### 第二种（springboot项目为例）</span><br><span class="line">- pom.xml文件添加如下依赖以及插件</span><br></pre></td></tr></table></figure><!-- 整合mybatis--><pre><code>    &lt;dependency&gt;        &lt;groupId&gt;org.mybatis.spring.boot&lt;/groupId&gt;        &lt;artifactId&gt;mybatis-spring-boot-starter&lt;/artifactId&gt;        &lt;version&gt;1.3.1&lt;/version&gt;    &lt;/dependency&gt;</code></pre><!-- mysql 数据库驱动. --><pre><code>    &lt;dependency&gt;        &lt;groupId&gt;mysql&lt;/groupId&gt;        &lt;artifactId&gt;mysql-connector-java&lt;/artifactId&gt;        &lt;version&gt;8.0.15&lt;/version&gt;    &lt;/dependency&gt;</code></pre><!--  mybatis自动生成--><pre><code>    &lt;dependency&gt;        &lt;groupId&gt;org.mybatis.generator&lt;/groupId&gt;        &lt;artifactId&gt;mybatis-generator-core&lt;/artifactId&gt;        &lt;version&gt;1.3.6&lt;/version&gt;    &lt;/dependency&gt;</code></pre> <!--代码自动生成插件--><pre><code>    &lt;!--使用完必须注释掉下面这个插件--&gt;    &lt;plugin&gt;            &lt;groupId&gt;org.mybatis.generator&lt;/groupId&gt;            &lt;artifactId&gt;mybatis-generator-maven-plugin&lt;/artifactId&gt;            &lt;version&gt;1.3.2&lt;/version&gt;            &lt;configuration&gt;                &lt;configurationFile&gt;src/main/resources/genernateConfig.xml&lt;/configurationFile&gt;                 &lt;!--上面是配置文件的位置--&gt;                &lt;overwrite&gt;true&lt;/overwrite&gt;                &lt;verbose&gt;true&lt;/verbose&gt;            &lt;/configuration&gt;        &lt;/plugin&gt;</code></pre><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">- 配置文件genernateConfig.xml</span><br><span class="line"></span><br></pre></td></tr></table></figure><?xml version="1.0" encoding="UTF-8"?><!DOCTYPE generatorConfiguration  PUBLIC "-//mybatis.org//DTD MyBatis Generator Configuration 1.0//EN"  "http://mybatis.org/dtd/mybatis-generator-config_1_0.dtd"><generatorConfiguration> <!--导入属性配置--> <properties resource="datasource.properties"></properties> <!-- 指定mysql的连接jar包,这个可以在maven库里找--> <classPathEntry location="E:\mavenR\repository\mysql\mysql-connector-java\8.0.15\mysql-connector-java-8.0.15.jar" /> <!-- context 是逆向工程的主要配置信息 --> <!-- id：name --> <!-- targetRuntime：设置生成的文件适用于那个 mybatis 版本 --> <context id="default" targetRuntime="MyBatis3">   <!-- 生成的 Java 文件的编码 -->  <property name="javaFileEncoding" value="UTF-8"/>   <!-- optional，旨在创建class时，对注释进行控制 -->  <commentGenerator>   <property name="suppressDate" value="true"/>   <property name="suppressAllComments" value="true"/>  </commentGenerator>   <!--jdbc的数据库连接 -->  <jdbcConnection    driverClass="${db.driverClassName}"    connectionURL="${db.url}"    userId="${db.username}"    password="${db.password}">  </jdbcConnection>   <!-- 非必需，类型处理器，在数据库类型和java类型之间的转换控制-->  <javaTypeResolver>   <property name="forceBigDecimals" value="false"/>  </javaTypeResolver>   <!-- Model模型生成器,用来生成含有主键key的类，记录类 以及查询Example类   targetPackage  指定生成的model生成所在的包名   targetProject  指定在该项目下所在的路径  -->  <!--<javaModelGenerator targetPackage="com.mmall.pojo" targetProject=".\src\main\java">-->  <javaModelGenerator targetPackage="com.ke.likehouse.model" targetProject="./src/main/java">   <!-- 是否允许子包，即targetPackage.schemaName.tableName -->   <property name="enableSubPackages" value="false"/>   <!-- 是否对model添加 构造函数 -->   <property name="constructorBased" value="true"/>   <!-- 是否对类CHAR类型的列的数据进行trim操作 -->   <property name="trimStrings" value="true"/>   <!-- 建立的Model对象是否 不可改变 即生成的Model对象不会有 setter方法，只有构造方法 -->   <property name="immutable" value="false"/>  </javaModelGenerator>   <!--mapper映射文件生成所在的目录 为每一个数据库的表生成对应的SqlMap文件 -->  <!--<sqlMapGenerator targetPackage="mappers" targetProject=".\src\main\resources">-->  <sqlMapGenerator targetPackage="mybatis/mappers" targetProject="./src/main/resources">   <property name="enableSubPackages" value="false"/>  </sqlMapGenerator>   <!-- 客户端代码，生成易于使用的针对Model对象和XML配置文件 的代码    type="ANNOTATEDMAPPER",生成Java Model 和基于注解的Mapper对象    type="MIXEDMAPPER",生成基于注解的Java Model 和相应的Mapper对象    type="XMLMAPPER",生成SQLMap XML文件和独立的Mapper接口  -->  <!-- targetPackage：mapper接口dao生成的位置 -->  <!--<javaClientGenerator type="XMLMAPPER" targetPackage="com.mmall.dao" targetProject=".\src\main\java">-->  <javaClientGenerator type="XMLMAPPER" targetPackage="com.ke.likehouse.dao" targetProject="./src/main/java">   <!-- enableSubPackages:是否让schema作为包的后缀 -->   <property name="enableSubPackages" value="false" />  </javaClientGenerator>   <!--生成的表-->  <!--domainObjectName：生成的domain类的名字，如果不设置，直接使用表名作为domain类的名字；可以设置为somepck.domainName，那么会自动把domainName类再放到somepck包里面；-->  <!--enableInsert（默认true）：指定是否生成insert语句；-->  <!--enableSelectByPrimaryKey（默认true）：指定是否生成按照主键查询对象的语句（就是getById或get）；-->  <!--enableSelectByExample（默认true）：MyBatis3Simple为false，指定是否生成动态查询语句；-->  <!--enableUpdateByPrimaryKey（默认true）：指定是否生成按照主键修改对象的语句（即update)；-->  <!--enableDeleteByPrimaryKey（默认true）：指定是否生成按照主键删除对象的语句（即delete）；-->  <!--enableDeleteByExample（默认true）：MyBatis3Simple为false，指定是否生成动态删除语句；-->  <!--enableCountByExample（默认true）：MyBatis3Simple为false，指定是否生成动态查询总条数语句（用于分页的总条数查询）；-->  <!--enableUpdateByExample（默认true）：MyBatis3Simple为false，指定是否生成动态修改语句（只修改对象中不为空的属性）；-->  <table tableName="agent" domainObjectName="Agent"    enableCountByExample="false"    enableUpdateByExample="false"    enableDeleteByExample="false"    enableSelectByExample="false"    selectByExampleQueryId="false">  </table>   <!-- geelynote mybatis插件的搭建 --> </context></generatorConfiguration><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">- 引用的datasource.properties</span><br><span class="line"></span><br></pre></td></tr></table></figure>db.driverClassName = com.mysql.cj.jdbc.Driverdb.url = jdbc:mysql://localhost:3306/twelve?serverTimezone=UTC&useUnicode=true&characterEncoding=utf-8&useSSL=truedb.username = rootdb.password = 你的密码<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">- 上面是比较详细的，下面是简约的(省去许多默认的)</span><br><span class="line"></span><br></pre></td></tr></table></figure><?xml version="1.0" encoding="UTF-8"?><!DOCTYPE generatorConfiguration PUBLIC "-//mybatis.org//DTD MyBatis Generator Configuration 1.0//EN" "http://mybatis.org/dtd/mybatis-generator-config_1_0.dtd"><generatorConfiguration>    <classPathEntry location="E:\mavenR\repository\mysql\mysql-connector-java\8.0.15\mysql-connector-java-8.0.15.jar" />    <context id="context1">        <jdbcConnection driverClass="com.mysql.cj.jdbc.Driver" connectionURL="jdbc:mysql://localhost:3306/mybatis?allowPublicKeyRetrieval=true&amp;useSSL=false&amp;serverTimezone=UTC" userId="root" password="123456">        </jdbcConnection>        <javaModelGenerator targetPackage="com.guo.springdemo1.pojo" targetProject="src/main/java" />        <sqlMapGenerator targetPackage="com.guo.springdemo1.mapper" targetProject="src/main/java" />        <javaClientGenerator targetPackage="com.guo.springdemo1.mapper" targetProject="src/main/java" type="XMLMAPPER" />        <!-- schema是数据库名如果想生成全部表：tableName="%" -->        <table schema="mybatis"  tableName="student">                    </table>    </context></generatorConfiguration><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">- 启动</span><br><span class="line">1. 右击项目---&gt;run maven-Plugins--&gt;mybatis-generator--&gt;双击  </span><br><span class="line"></span><br><span class="line">##### 一对一、一对多、多对多自动生成配置方法  </span><br><span class="line">- 一对一    </span><br><span class="line">```  </span><br><span class="line"></span><br></pre></td></tr></table></figure>### Mybatis与Spring整合  - 导入相关包  - 新建一个spring配置文件applicationContext.xml<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><br><span class="line">&lt;beans xmlns=&quot;http://www.springframework.org/schema/beans&quot;</span><br><span class="line">        xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span><br><span class="line">        xmlns:aop=&quot;http://www.springframework.org/schema/aop&quot;</span><br><span class="line">        xmlns:tx=&quot;http://www.springframework.org/schema/tx&quot;</span><br><span class="line">        xsi:schemaLocation=&quot;http://www.springframework.org/schema/beans  </span><br><span class="line">               http://www.springframework.org/schema/beans/spring-beans-3.0.xsd</span><br><span class="line">               http://www.springframework.org/schema/tx</span><br><span class="line">               http://www.springframework.org/schema/tx/spring-tx-3.0.xsd</span><br><span class="line">               http://www.springframework.org/schema/aop</span><br><span class="line">               http://www.springframework.org/schema/aop/spring-aop-3.0.xsd&quot;&gt;</span><br><span class="line">               </span><br><span class="line">      &lt;!--  &lt;bean id=&quot;dataSource&quot; class=&quot;org.springframework.jdbc.datasource.DriverManagerDataSource&quot;&gt; </span><br><span class="line">              &lt;property name=&quot;driverClassName&quot;&gt;&lt;value&gt;com.mysql.cj.jdbc.Driver&lt;/value&gt;&lt;/property&gt; </span><br><span class="line">              &lt;property name=&quot;url&quot;&gt;&lt;value&gt;jdbc:mysql://localhost:3306/guohongming?useUnicode=true&amp;amp;characterEncoding=UTF-8&amp;amp;serverTimezone=UTC&lt;/value&gt;&lt;/property&gt; </span><br><span class="line">              &lt;property name=&quot;username&quot;&gt;&lt;value&gt;root&lt;/value&gt;&lt;/property&gt; </span><br><span class="line">              &lt;property name=&quot;password&quot;&gt;&lt;value&gt;123456&lt;/value&gt;&lt;/property&gt; </span><br><span class="line">       &lt;/bean&gt;   --&gt;</span><br><span class="line">       &lt;!-- 配置连接池 --&gt;</span><br><span class="line">       &lt;bean name=&quot;dataSource&quot; class=&quot;com.mchange.v2.c3p0.ComboPooledDataSource&quot;&gt;</span><br><span class="line">            &lt;property name=&quot;driverClass&quot;&gt;&lt;value&gt;com.mysql.cj.jdbc.Driver&lt;/value&gt;&lt;/property&gt; </span><br><span class="line">            &lt;property name=&quot;jdbcUrl&quot;&gt;&lt;value&gt;jdbc:mysql://localhost:3306/guohongming?useUnicode=true&amp;amp;characterEncoding=UTF-8&amp;amp;serverTimezone=UTC&lt;/value&gt;&lt;/property&gt; </span><br><span class="line">            &lt;property name=&quot;user&quot;&gt;&lt;value&gt;root&lt;/value&gt;&lt;/property&gt; </span><br><span class="line">            &lt;property name=&quot;password&quot;&gt;&lt;value&gt;123456&lt;/value&gt;&lt;/property&gt; </span><br><span class="line">       &lt;/bean&gt;</span><br><span class="line">                </span><br><span class="line">     &lt;!--配置mybatis sqlSessionFactory  --&gt;</span><br><span class="line">     &lt;bean id=&quot;sqlSessionFactoryBean&quot; class=&quot;org.mybatis.spring.SqlSessionFactoryBean&quot;&gt;</span><br><span class="line">         &lt;property name=&quot;dataSource&quot; ref=&quot;dataSource&quot;/&gt;</span><br><span class="line">         &lt;property name=&quot;configLocation&quot; value=&quot;classpath:sqlMapConfig.xml&quot;/&gt;</span><br><span class="line">     &lt;/bean&gt;</span><br><span class="line">     </span><br><span class="line">     &lt;bean id=&quot;testDao&quot; class=&quot;com.guo.dao.TestDaoImpl&quot;&gt;</span><br><span class="line">        &lt;property name=&quot;sqlSessionFactory&quot; ref=&quot;sqlSessionFactoryBean&quot;/&gt;</span><br><span class="line">     &lt;/bean&gt;</span><br><span class="line">     </span><br><span class="line">     &lt;!-- mapper动态代理 --&gt;</span><br><span class="line">     &lt;!-- &lt;bean id=&quot;testMapper&quot; class=&quot;org.mybatis.spring.mapper.MapperFactoryBean&quot;&gt;</span><br><span class="line">        注入sqlSessionFactory</span><br><span class="line">        &lt;property name=&quot;sqlSessionFactory&quot; ref=&quot;sqlSessionFactoryBean&quot;/&gt;</span><br><span class="line">        配置接口 </span><br><span class="line">        &lt;property name=&quot;mapperInterface&quot; value=&quot;com.guo.mapper.TestMapper&quot;/&gt;</span><br><span class="line">     &lt;/bean&gt; --&gt;</span><br><span class="line">     </span><br><span class="line">     &lt;!-- mapper动态扫描开发 --&gt;</span><br><span class="line">     &lt;bean class=&quot;org.mybatis.spring.mapper.MapperScannerConfigurer&quot;&gt;</span><br><span class="line">       &lt;property name=&quot;basePackage&quot; value=&quot;com.guo.mapper&quot;/&gt;</span><br><span class="line">     &lt;/bean&gt;</span><br><span class="line">&lt;/beans&gt; </span><br><span class="line"></span><br><span class="line">```  </span><br><span class="line">- 配置mybatis的主配置文件sqlMapConfig.xml  </span><br><span class="line"></span><br></pre></td></tr></table></figure><?xml version="1.0" encoding="UTF-8" ?><!DOCTYPE configuration  PUBLIC "-//mybatis.org//DTD Config 3.0//EN"  "http://mybatis.org/dtd/mybatis-3-config.dtd"><configuration>  <!-- 通过配置文件来连接数据库 -->  <properties resource="db.properties"/>  <!-- 推荐使用以包的形式来配置别名，包的形式会扫描主包和子包的所有类文件，默认以类名为别名，大小写不限 -->  <typeAliases>      <!--    <typeAlias type="com.mybatis.bean.test" alias="test"/>-->      <package name="com.guo.bean"/>  </typeAliases>  <mappers>  <!-- <mapper resource="TestMapper.xml"/> -->  <package name="com.guo.mapper"/></mappers></configuration>```  - 建立和编写好相关javabean类  <h5 id="DAO层开发"><a href="#DAO层开发" class="headerlink" title="DAO层开发"></a>DAO层开发</h5><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><blockquote><ul><li><a href=""></a></li><li><a href=""></a></li></ul></blockquote>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;Mybatis架构图&quot;&gt;&lt;a href=&quot;#Mybatis架构图&quot; class=&quot;headerlink&quot; title=&quot;Mybatis架构图&quot;&gt;&lt;/a&gt;Mybatis架构图&lt;/h3&gt;&lt;figure class=&quot;highlight plaintext&quot;&gt;&lt;tabl</summary>
      
    
    
    
    <category term="框架" scheme="https://github.com/ghm0824/blog/categories/%E6%A1%86%E6%9E%B6/"/>
    
    <category term="MyBatis" scheme="https://github.com/ghm0824/blog/categories/%E6%A1%86%E6%9E%B6/MyBatis/"/>
    
    
    <category term="mybatis" scheme="https://github.com/ghm0824/blog/tags/mybatis/"/>
    
  </entry>
  
  <entry>
    <title>Welcome guohm&#39;s blog</title>
    <link href="https://github.com/ghm0824/blog/wiki/index/"/>
    <id>https://github.com/ghm0824/blog/wiki/index/</id>
    <published>2021-05-08T17:55:57.000Z</published>
    <updated>2021-05-09T06:37:34.741Z</updated>
    
    <content type="html"><![CDATA[<h1 id="时间从来不语，却回答了所有问题"><a href="#时间从来不语，却回答了所有问题" class="headerlink" title="时间从来不语，却回答了所有问题"></a>时间从来不语，却回答了所有问题</h1><p>这是个人 搭建的blog 站点，主要记录一些自己总结的只言片语的零散知识点。</p><p><strong>非礼勿视，谢谢！</strong></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;时间从来不语，却回答了所有问题&quot;&gt;&lt;a href=&quot;#时间从来不语，却回答了所有问题&quot; class=&quot;headerlink&quot; title=&quot;时间从来不语，却回答了所有问题&quot;&gt;&lt;/a&gt;时间从来不语，却回答了所有问题&lt;/h1&gt;&lt;p&gt;这是个人 搭建的blog 站点，主要</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>java常见错误汇总</title>
    <link href="https://github.com/ghm0824/blog/wiki/java/%E5%B8%B8%E8%A7%81%E9%94%99%E8%AF%AF/java%E5%B8%B8%E8%A7%81%E9%94%99%E8%AF%AF%E6%B1%87%E6%80%BB/"/>
    <id>https://github.com/ghm0824/blog/wiki/java/%E5%B8%B8%E8%A7%81%E9%94%99%E8%AF%AF/java%E5%B8%B8%E8%A7%81%E9%94%99%E8%AF%AF%E6%B1%87%E6%80%BB/</id>
    <published>2021-03-12T11:34:55.000Z</published>
    <updated>2021-05-09T06:22:05.206Z</updated>
    
    <content type="html"><![CDATA[<h1 id="什么都没有呢"><a href="#什么都没有呢" class="headerlink" title="什么都没有呢"></a>什么都没有呢</h1><blockquote><p>测试test1</p></blockquote>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;什么都没有呢&quot;&gt;&lt;a href=&quot;#什么都没有呢&quot; class=&quot;headerlink&quot; title=&quot;什么都没有呢&quot;&gt;&lt;/a&gt;什么都没有呢&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;测试test1&lt;/p&gt;
&lt;/blockquote&gt;
</summary>
      
    
    
    
    <category term="java" scheme="https://github.com/ghm0824/blog/categories/java/"/>
    
    <category term="常见错误" scheme="https://github.com/ghm0824/blog/categories/java/%E5%B8%B8%E8%A7%81%E9%94%99%E8%AF%AF/"/>
    
    
    <category term="java" scheme="https://github.com/ghm0824/blog/tags/java/"/>
    
  </entry>
  
</feed>
